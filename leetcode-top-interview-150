https://leetcode.com/problems/unique-paths-ii/description/?envType=study-plan-v2&envId=top-interview-150

---------------------------------------------------------------------------
HEAP

1. kth-largest-element-in-an-array

a. Put all of them in a max heap, and then pop out. 
Heapify: O(n). Pop: O(logn).
K* O(logn) + O(n).

b. Insert the first K in heap, and then replace with the items in remaining N-K if they are larger than the top of the max heap.

c. Quicksort's partition.


2. IPO

Basic version: If unlimited capital, then find top K projects with maximum profit.

Actual version: If x capital, then among all projects with <=x capital, chose the one with the maximum profit.

Sort projects by capital.
c1, c2, c3, c4, c5, c6, c7, c8
p1, p2, p3, p4, p5, p6, p7, p8

Iterate until you have processed all projects with <=x capital, then pick the one from the heap with max profit.
Iterate until you have processed all projects with <=x+px capital, then pick the one from the heap with max profit.

After loop, keep on picking projects until you have picked all k projects, as long as you have the capital.

O(nlogn) + O(nlogn) + O(klogn)
Sorting + Insert N + Pop k

3. find-k-pairs-with-smallest-sums

Insert first element from 1st array, and first element from the 2nd array, in the min heap as:
(ai + bj, i, j)

K times -> pop, insert (sum, i+1, j), (sum, i, j+1), (sum, i+1, j+1). Use set to avoid inserting same thing multiple times.

---------------------------------------------------------------------------

Multidimensional DP

1. maximal-square

dp[i][j] denotes dimension of square. Answer will be dp[i][j] * dp[i][j].

if (a[i][j]==1) {
  dp[i][j] = min(dp[i-1][j-1],length[i-1][j], breadth[i][j-1]) + 1;
}

2. unique-paths-ii

dp[i][j] denotes unique paths

if (!obstacle(i,j)) {
  dp[i][j] = dp[i][j-1] + dp[i-1][j]
}

3. minimum-path-sum

dp[i][j] = a[i][j] + min(dp[i-1][j] , dp[i][j-1]);

4. triangle

// go from i=n-1 to i=0
dp[i][j] = min(dp[i+1][j] , dp[i+1][j+1]);

5. best-time-to-buy-and-sell-stock-iv

TODO

---------------------------------------------------------------------------

Graph BFS

1. Word ladder

// Insert beginWord in queue.
// Until queue is empty, pop out word, then find out adjacent words, see if they are in the worldlist map.
// If yes, insert them. 
// What if they are already inserted? Use another map to keep track of whether they have already been inserted
// and what is the min distance.

---------------------------------------------------------------------------

Graph General

1. Course schedule

// Keep track of number of nodes.
// Find node with indegree 0. If none exists, but number of nodes are left, then return false.
// If exists, then reduce indegree for all of its neighbors.
// Repeat.
https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/

2. Course schedule II




